// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.1.3 (swiftlang-1100.0.282.1 clang-1100.0.33.15)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name Veriff
import AVFoundation
import AVKit
import Foundation
import SafariServices
import SocketIO
import Swift
import UIKit
@_exported import Veriff
import WebRTC
public struct Branding {
  public init(themeColor: UIKit.UIColor? = nil, navigationBarImage: UIKit.UIImage? = nil)
}
public protocol VeriffDelegate : AnyObject {
  func onSession(result: Veriff.VeriffResult, sessionToken: Swift.String)
}
public class Veriff {
  public static let shared: Veriff.Veriff
  weak public var delegate: Veriff.VeriffDelegate?
  public func set(configuration: Veriff.VeriffConfiguration)
  public func startAuthentication()
  public func startAuthentication(from viewController: UIKit.UIViewController)
  @objc deinit
}
extension Veriff {
  public static var themeColor: UIKit.UIColor {
    get
  }
  public static var navigationBarImage: UIKit.UIImage? {
    get
  }
}
extension URL {
  public func isValid() -> Swift.Bool
  public func veriffSessionUrl() -> Foundation.URL?
}
extension NSObject {
  public class var className: Swift.String {
    get
  }
  public var className: Swift.String {
    get
  }
  public class func viewNib(_ bundle: Foundation.Bundle? = Bundle(for: Veriff.self)) -> UIKit.UINib
}
extension UIColor {
  public static func veriffBlueColor() -> UIKit.UIColor
  public static func defaultGradientStart() -> UIKit.UIColor
  public static func defaultGradientEnd() -> UIKit.UIColor
  public static func veriffDarkBlueColor() -> UIKit.UIColor
  public static func brightLightBlueColor() -> UIKit.UIColor
  public static func veriffLightGreenColor() -> UIKit.UIColor
  public static func veriffYellowColor() -> UIKit.UIColor
  public static func selectedButtonColor() -> UIKit.UIColor
  public static func darkTransparentColor() -> UIKit.UIColor
}
public struct VeriffConfiguration {
  public var queryItems: [Foundation.URLQueryItem]?
  public var branding: Veriff.Branding? {
    get
    set
  }
  public init?(sessionToken: Swift.String, sessionUrl: Swift.String)
}
public enum VeriffResultCode : Swift.Int, Swift.RawRepresentable {
  case UNABLE_TO_ACCESS_CAMERA
  case UNABLE_TO_ACCESS_MICROPHONE
  case STATUS_USER_CANCELED
  case STATUS_SUBMITTED
  case STATUS_ERROR_SESSION
  case STATUS_ERROR_NETWORK
  case STATUS_DONE
  case STATUS_ERROR_UNKNOWN
  case UNSUPPORTED_SDK_VERSION
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public class VeriffResult {
  public var code: Veriff.VeriffResultCode
  public var description: Swift.String
  @objc deinit
}
@objc public class VeriffNavigationController : UIKit.UINavigationController {
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public var shouldAutorotate: Swift.Bool {
    @objc get
  }
  @objc override dynamic public var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
  @objc override dynamic public var preferredInterfaceOrientationForPresentation: UIKit.UIInterfaceOrientation {
    @objc get
  }
  @objc override dynamic public var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @objc override dynamic public func pushViewController(_ viewController: UIKit.UIViewController, animated: Swift.Bool)
  @objc override dynamic public func setViewControllers(_ viewControllers: [UIKit.UIViewController], animated: Swift.Bool)
  @objc override dynamic public func present(_ viewControllerToPresent: UIKit.UIViewController, animated flag: Swift.Bool, completion: (() -> Swift.Void)? = nil)
  @available(iOS 5.0, *)
  @objc override dynamic public init(navigationBarClass: Swift.AnyClass?, toolbarClass: Swift.AnyClass?)
  @objc override dynamic public init(rootViewController: UIKit.UIViewController)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
public struct VRFKeychain {
  @discardableResult
  public static func setSessionToken(_ token: Swift.String) -> Swift.Bool
  public static func getSessionToken() -> Swift.String?
  @discardableResult
  public static func removeAllValues() -> Swift.Bool
}
extension UIFont {
  public static func veriffLight(with size: CoreGraphics.CGFloat) -> UIKit.UIFont
  public static func veriffRegular(with size: CoreGraphics.CGFloat) -> UIKit.UIFont
  public static func veriffSemiBold(with size: CoreGraphics.CGFloat) -> UIKit.UIFont
  public static func veriffBold(with size: CoreGraphics.CGFloat) -> UIKit.UIFont
  public static func veriffDisplayBold(with size: CoreGraphics.CGFloat) -> UIKit.UIFont
}
extension Veriff.VeriffResultCode : Swift.Equatable {}
extension Veriff.VeriffResultCode : Swift.Hashable {}
